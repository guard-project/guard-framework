name: Docker Image CI

on:
  push:
  workflow_dispatch: # manual trigger
  schedule:
    - cron: "0 05 * * *" # everyday at 05am

jobs:
  docker:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - component: cnit_ml
            version: version1
            context: core_framework/security_services/algo1.1/algo1.1.2
            title: CNIT ML (Machine Learning)
            description: "Detects multiple DDoS attacks (multiclass) using Random Forests."
            url: https://github.com/guard-project/cnit_ml

          - component: cnit_ml
            version: version2
            context: core_framework/security_services/algo1.1/algo1.1.2
            title: CNIT ML (Machine Learning)
            description: "Detects multiple DDoS attacks (multiclass) using Random Forests."
            url: https://github.com/guard-project/cnit_ml

          - component: filebeat
            version: 7.8.0
            context: local_sidercars/monitoring/filebeat
            title: Filebeat
            description: "Lightweight shipper for logs by Elastic."
            url: https://www.elastic.co/beats/filebeat

          - component: lcp
            version: master
            context: local_sidercars/local_control_management/lcp
            title: LCP (Local Control Plane)
            description: "Control plane responsible for programmability and changing the behavior of data plane at run-time."
            url: https://github.com/guard-project/lcp

          - component: lcp
            version: v1.0.3
            context: local_sidercars/local_control_management/lcp
            title: LCP (Local Control Plane)
            description: "Control plane responsible for programmability and changing the behavior of data plane at run-time."
            url: https://github.com/guard-project/lcp

          - component: lcp
            version: v1.0.2
            context: local_sidercars/local_control_management/lcp
            title: LCP (Local Control Plane)
            description: "Control plane responsible for programmability and changing the behavior of data plane at run-time."
            url: https://github.com/guard-project/lcp

          - component: lcp
            version: v1.0.1
            context: local_sidercars/local_control_management/lcp
            title: LCP (Local Control Plane)
            description: "Control plane responsible for programmability and changing the behavior of data plane at run-time."
            url: https://github.com/guard-project/lcp

          - component: lcp
            version: v1.0.0
            context: local_sidercars/local_control_management/lcp
            title: LCP (Local Control Plane)
            description: "Control plane responsible for programmability and changing the behavior of data plane at run-time."
            url: https://github.com/guard-project/lcp

          - component: logstash-local
            version: 7.8.0
            context: local_sidercars/data_fusion/logstash
            title: Logstash
            description: "Logstash is a tool for managing events and logs. Image for local services/environments."
            url: https://www.elastic.co/logstash

          - component: metricbeat
            version: 7.8.0
            context: local_sidercars/monitoring/metricbeat
            title: Metricbeat
            description: "Lightweight shipper for metrics by Elastic."
            url: https://www.elastic.co/beats/metricbeat

          - component: packetbeat
            version: 7.8.0
            context: local_sidercars/monitoring/packetbeat
            title: Packetbeat
            description: "Lightweight shipper for network data."
            url: https://www.elastic.co/beats/packetbeat

          - component: cb-manager
            version: master
            context: core_framework/context_broker/cb-manager
            title: CB (Context Broker) Manager
            description: "A REST Interface exposes data and events stored in the internal storage system in a structured way."
            url: https://github.com/guard-project/cb-manager

          - component: cb-manager
            version: v1.0.3
            context: core_framework/context_broker/cb-manager
            title: CB (Context Broker) Manager
            description: "A REST Interface exposes data and events stored in the internal storage system in a structured way."
            url: https://github.com/guard-project/cb-manager

          - component: cb-manager
            version: v1.0.2
            context: core_framework/context_broker/cb-manager
            title: CB (Context Broker) Manager
            description: "A REST Interface exposes data and events stored in the internal storage system in a structured way."
            url: https://github.com/guard-project/cb-manager

          - component: cb-manager
            version: v1.0.1
            context: core_framework/context_broker/cb-manager
            title: CB (Context Broker) Manager
            description: "A REST Interface exposes data and events stored in the internal storage system in a structured way."
            url: https://github.com/guard-project/cb-manager

          - component: cb-manager
            version: v1.0.0
            context: core_framework/context_broker/cb-manager
            title: CB (Context Broker) Manager
            description: "A REST Interface exposes data and events stored in the internal storage system in a structured way."
            url: https://github.com/guard-project/cb-manager

          - component: logstash-core
            version: 7.8.0
            context: core_framework/context_broker/logstash
            title: Logstash
            description: "Logstash is a tool for managing events and logs. Image for Context Broker."
            url: https://www.elastic.co/logstash

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Clone
        run: git clone -b developmentCNIT https://alexcarrega:glpat-n4ePfst_LqsHUgjJRtF-@gitlab.com/guard2/guard-platform.git gitlab

      - name: Test
        run: ls gitlab/ -al

      - name: Repo metadata
        id: repo
        uses: actions/github-script@v3
        with:
          script: |
            const repo = await github.repos.get(context.repo)
            return repo.data

      - name: Prepare
        id: prep
        run: |
          echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          echo ::set-output name=branch::$(echo ${GITHUB_REF#refs/heads/} | sed 's/\//_/g')

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: gitlab/${{ matrix.context }}
          file: ${{ matrix.context }}/Dockerfile
          build-args: |
            VERSION=${{ matrix.version }}
          no-cache: true
          push: true
          tags: guardproject/${{ matrix.component }}:${{ matrix.version }}
          labels: |
            org.opencontainers.image.title=${{ matrix.title }}
            org.opencontainers.image.description=${{ matrix.description }}
            org.opencontainers.image.url=${{ matrix.url }}
            org.opencontainers.image.source=${{ fromJson(steps.repo.outputs.result).html_url }}/tree/${{ steps.prep.outputs.branch }}/${{ matrix.context }}
            org.opencontainers.image.version=${{ matrix.version }}
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.licenses=${{ fromJson(steps.repo.outputs.result).license.spdx_id }}

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
